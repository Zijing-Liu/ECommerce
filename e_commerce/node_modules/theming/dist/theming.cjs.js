'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var warning = _interopDefault(require('warning'));
var PropTypes = _interopDefault(require('prop-types'));
var hoist = _interopDefault(require('hoist-non-react-statics'));
var getDisplayName = _interopDefault(require('react-display-name'));
var createReactContext = _interopDefault(require('create-react-context'));

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function isObject(obj) {
  return obj !== null && typeof obj === 'object' && !Array.isArray(obj);
}

function createThemeProvider(context) {
  var _class, _temp;

  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(ThemeProvider, _React$Component);

    function ThemeProvider() {
      return _React$Component.apply(this, arguments) || this;
    }

    var _proto = ThemeProvider.prototype;

    // Get the theme from the props, supporting both (outerTheme) => {} as well as object notation
    _proto.getTheme = function getTheme(outerTheme) {
      var theme = this.props.theme;

      if (typeof theme === 'function') {
        var mergedTheme = theme(outerTheme);
        warning(isObject(mergedTheme), '[ThemeProvider] Please return an object from your theme function');
        return mergedTheme;
      }

      warning(isObject(theme), '[ThemeProvider] Please make your theme prop a plain object');
      return !outerTheme ? theme : _extends({}, outerTheme, theme);
    };

    _proto.render = function render() {
      var _this = this;

      var children = this.props.children;

      if (!children) {
        return null;
      }

      return React.createElement(context.Consumer, null, function (outerTheme) {
        return React.createElement(context.Provider, {
          value: _this.getTheme(outerTheme)
        }, children);
      });
    };

    return ThemeProvider;
  }(React.Component), _defineProperty(_class, "propTypes", {
    children: PropTypes.node,
    theme: PropTypes.oneOfType([PropTypes.shape({}), PropTypes.func]).isRequired
  }), _defineProperty(_class, "defaultProps", {
    children: null
  }), _temp;
}

function createWithTheme(context) {
  return function hoc(Component) {
    function withTheme(props) {
      var innerRef = props.innerRef,
          otherProps = _objectWithoutPropertiesLoose(props, ["innerRef"]);

      return React.createElement(context.Consumer, null, function (theme) {
        warning(isObject(theme), '[theming] Please use withTheme only with the ThemeProvider');
        return React.createElement(Component, _extends({
          theme: theme,
          ref: innerRef
        }, otherProps));
      });
    }

    withTheme.displayName = "WithTheme(" + getDisplayName(Component) + ")";
    hoist(withTheme, Component);
    return withTheme;
  };
}

var ThemeContext = createReactContext();

function createTheming(context) {
  return {
    context: context,
    withTheme: createWithTheme(context),
    ThemeProvider: createThemeProvider(context)
  };
}

var _createTheming = createTheming(ThemeContext),
    withTheme = _createTheming.withTheme,
    ThemeProvider = _createTheming.ThemeProvider;

exports.ThemeContext = ThemeContext;
exports.withTheme = withTheme;
exports.createTheming = createTheming;
exports.ThemeProvider = ThemeProvider;
